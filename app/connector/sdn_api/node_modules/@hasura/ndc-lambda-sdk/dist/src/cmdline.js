"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeCommand = makeCommand;
const commander_1 = require("commander");
const package_json_1 = require("../package.json");
const sdk = __importStar(require("@hasura/ndc-sdk-typescript"));
function makeCommand(commandActions) {
    const program = new commander_1.Command()
        .name("ndc-lambda-sdk")
        .version(package_json_1.version);
    const serveCommand = sdk.getServeCommand();
    serveCommand.action((serverOptions, command) => {
        const hostOpts = hostCommand.opts();
        return commandActions.serveAction(hostOpts, serverOptions);
    });
    const hostCommand = program
        .command("host")
        .addOption(new commander_1.Option("--watch", "watch for configuration changes and reload")
        .default(false)
        .env("WATCH"))
        .requiredOption("-f, --functions <filepath>", "path to your TypeScript functions file")
        .addCommand(serveCommand);
    return program;
}
//# sourceMappingURL=cmdline.js.map